#!/usr/bin/python

##############################################################################################
# Copyright (C) 2014 Pier Luigi Ventre - (Consortium GARR and University of Rome "Tor Vergata")
# Copyright (C) 2014 Giuseppe Siracusano, Stefano Salsano - (CNIT and University of Rome "Tor Vergata")
# www.garr.it - www.uniroma2.it/netgroup - www.cnit.it
#
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Usage Example Of The Testbed Deployer.
#
# @author Pier Luigi Ventre <pl.ventre@gmail.com>
# @author Giuseppe Siracusano <a_siracusano@tin.it>
# @author Stefano Salsano <stefano.salsano@uniroma2.it>
#
# XXX Depends On Luca Prete Script

import argparse

parser_path = "../Dreamer-Topology-Parser-and-Validator/"
import sys
sys.path.append(parser_path)
from topo_parser import TopoParser

from testbed import *
from testbed_cli import TestbedCLI
from coexistence_mechanisms import *
from ingress_classification import *
from testbed_deployer_utils import *
import os

# XXX VLL Pusher Param
vll_path = "../vll_pusher_for_floodlights/"	

# XXX Build Topology From topo.json generated through TopologyDesigner And Build Configuration File For Classification Function
# and for VLL pusher
# TODO Generation Configuration File For Classification Function
# TODO Properly Generation of testbed.sh for the VLL


def simpleRouter(param):
	
	verbose = True	

	if verbose:
		print "*** No Autogenerated"
	generator = PropertiesGenerator("GOFF")

	if verbose:
		print "*** Create %s Routers" % param
	routers_n = []
	i = 0
	for i in range(int(param)):
		routers_n.append("rou%s" % (i+1))
	
	if verbose:
		print "*** Create One L2Sw"
	l2sws_n = []
	l2sws_n.append("l2sw%s" % (int(param)+1))

	if verbose:
		print "*** Create %s EUHs" % param
	euhs_n = []
	for i in range((int(param)+1),(2 * int(param)+1)):
		euhs_n.append("euh%s" % (i+1))
	
	if verbose:
		print "*** Build Vertices Properties"
		routers_properties = generator.getVerticesProperties(routers_n)
		l2sws_properties = generator.getVerticesProperties(l2sws_n)
		euhs_properties = generator.getVerticesProperties(euhs_n)

	print "*** simpleRouter With", param, "Router"
	testbed = TestbedRouterGOFF("OpenVPN", "10.0.0.0/255.0.0.0", verbose = False)
	
	links = []
	for i in range(int(param)):
		links.append((routers_n[i],"l2sw4"))

	l2switch = testbed.addL2Switch(l2sws_n[0])

	routers = []
	for i in range(int(param)):
		routers.append(testbed.addRouter(routers_n[i], routers_properties[i]))

	l2_properties = generator.getLinksProperties(links)

	i = 0
	for i in range(int(param)):
		testbed.addLink(routers[i].name, l2switch.name, l2_properties[i])
		if verbose:			
			print "*** Connect", routers[i].name, "To", l2switch.name
			print "*** Link Properties", l2_properties[i]

	euhs = []
	for i in range(int(param)):
		euh = testbed.addEuh(euhs_n[i])
		linkproperty = generator.getLinksProperties((euh.name, routers[i].name))
		testbed.addLink(euh.name, routers[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", euh.name, "To", routers[i].name
			print "*** Link Properties", linkproperty[0]

	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate MGMT cfg"
	testbed.generateMGMTCfg()

def meshRouter(param):
	
	verbose = True	

	if verbose:
		print "*** No Autogenerated"
	generator = PropertiesGenerator("GOFF")
	
	if verbose:
		print "*** Create Routers"
	routers_n = ["rou%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create Hosts"
	euhs_n = ["euh%s" % (x + 1) for x in range(int(param), (2 * int(param)))]
	if verbose:
		print "*** Build Vertices Properties"
		routers_properties = generator.getVerticesProperties(routers_n)
		euhs_properties = generator.getVerticesProperties(euhs_n)

	print "*** Mesh With", param, "Router"
	testbed = TestbedRouterGOFF("OpenVPN", "10.0.0.0/255.0.0.0", verbose = False)
	
	routers = []
	for i in range(int(param)):
		router = testbed.addRouter(routers_n[i], routers_properties[i])
		for rhs in routers:
			linkproperty = generator.getLinksProperties((router.name, rhs.name))
			testbed.addLink(router.name, rhs.name, linkproperty[0])
			if verbose:			
				print "*** Connect", router.name, "To", rhs.name
				print "*** Link Properties", linkproperty[0]
			linkproperty = generator.getLinksProperties((router.name, rhs.name))
			testbed.addLink(router.name, rhs.name, linkproperty[0])
			if verbose:			
				print "*** Connect", router.name, "To", rhs.name
				print "*** Link Properties", linkproperty[0]
		routers.append(router)

	euhs = []
	for i in range(int(param)):
		euh = testbed.addEuh(euhs_n[i])
		linkproperty = generator.getLinksProperties((euh.name, routers[i].name))
		testbed.addLink(euh.name, routers[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", euh.name, "To", routers[i].name
			print "*** Link Properties", linkproperty[0]

	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate MGMT cfg"
	testbed.generateMGMTCfg()
	

def topo(param):

	verbose = True
	if verbose:
		print "*** Build Topology From Parsed File"
	parser = TopoParser(param, verbose = False)
	(ppsubnets, l2subnets) = parser.getsubnets()
	vlls = parser.getVLLs()
	# XXX
	if parser.autogenerated == False:

		if verbose:
			print "*** No Autogenerated"
		# XXX OFELIA
		generator = PropertiesGenerator("OFELIA")
		if verbose:
			print "*** Build Vertices Properties"
			oshis_properties = generator.getVerticesProperties(parser.oshis)
			aoshis_properties = generator.getVerticesProperties(parser.aoshis)
			l2sws_properties = generator.getVerticesProperties(parser.l2sws)
			euhs_properties = generator.getVerticesProperties(parser.euhs)

		if verbose:
			print "*** Build Point-To-Point Links Properties"
		pp_properties = []
		for ppsubnet in ppsubnets:
			pp_properties.append(generator.getLinksProperties(ppsubnet.links))
		
		if verbose:
			print "*** Build Switched Links Properties"
		l2_properties = []
		for l2subnet in l2subnets:
			l2_properties.append(generator.getLinksProperties(l2subnet.links))

		if verbose:
			print "*** Build VLLs Properties"
		vlls_properties = []
		for vll in vlls:
			vlls_properties.append(generator.getVLLsProperties(vll))
			

	set_oshis = parser.oshis
	set_aoshis = parser.aoshis
	set_l2sws = parser.l2sws
	set_euhs = parser.euhs
	# XXX OFELIA
	testbed = TestbedOSHIOFELIA("VXLAN", "10.0.0.0/255.0.0.0", verbose = False)
	if verbose:
		print "*** Build OSHI"
	i = 0	
	for oshi in set_oshis:
		testbed.addOshi(oshi, oshis_properties[i])
		if verbose:
			print "*** %s - %s" %(oshi, oshis_properties[i])
		i = i + 1
	if verbose:
		print "*** Build AOSHI"
	i = 0
	for aoshi in set_aoshis:
		testbed.addAoshi(aoshi, aoshis_properties[i])
		if verbose:
			print "*** %s - %s" %(aoshi, aoshis_properties[i])	
		i = i + 1
	if verbose:
		print "*** Build L2Switch"
	i = 0
	for l2switch in set_l2sws:
		testbed.addL2Switch(l2switch)	
		i = i + 1
	if verbose:
		print "*** Build CONTROLLER"
	ctrl = testbed.addController("ctrl1", 6633)	
	coex = CoexA(1)
	testbed.addCoexistenceMechanism(coex)
	linkproperties = generator.getLinksProperties((oshi, ctrl.name))
	[(lhs_vi, lhs_tap, lhs_ospf_net), (rhs_vi, rhs_tap, rhs_ospf_net)] = testbed.addLink(oshi, ctrl.name, linkproperties[0])
	ingress = IngrB(coex, lhs_tap, lhs_vi)
	testbed.addIngressClassification(ctrl.name, oshi, ingress)
	if verbose:			
		print "*** Connect", ctrl.name, "To", oshi

	if verbose:
		print "*** Build EUHS"
	for euh in set_euhs:
		testbed.addEuh(euh)

	if verbose:	
		print "*** Create Networks Point To Point"
	i = 0
	for ppsubnet in ppsubnets:
			links = ppsubnet.links
			if verbose:
				print "*** Subnet: Node %s - Links %s" %(ppsubnet.nodes, links)
			node1 = links[0][0]
			node2 = links[0][1]
			[(lhs_vi, lhs_tap, lhs_ospf_net), (rhs_vi, rhs_tap, rhs_ospf_net)] = testbed.addLink(node1, node2, pp_properties[i][0])
			if verbose:			
				print "*** Connect", node1, "To", node2
				print "*** Link Properties", pp_properties[i][0]
			i = i + 1

	if verbose:	
		print "*** Create Switched Networks"
	j = 0
	for l2subnet in l2subnets:
			links = l2subnet.links
			if verbose:
					print "*** Subnet: Node %s - Links %s" %(l2subnet.nodes, links)
			i = 0
			for link in links:
				node1 = link[0]
				node2 = link[1]
				[(lhs_vi, lhs_tap, lhs_ospf_net), (rhs_vi, rhs_tap, rhs_ospf_net)] = testbed.addLink(node1, node2, l2_properties[j][i])
				if verbose:			
					print "*** Connect", node1, "To", node2
					print "*** Link Properties", l2_properties[j][i]
				i = i + 1
			j = j + 1

	i = 0
	for vll in vlls:
		testbed.addVLL(vll[0], vll[1], vlls_properties[i])
		if verbose:			
			print "*** VLLs Properties", vlls_properties[i]
		i = i + 1	
	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate LME rules"
	testbed.generateLMErules()
	print "*** Generate VLL pusher cfg"
	testbed.generateVLLCfg(vll_path)
	print "*** Generate MGMT cfg"
	testbed.generateMGMTCfg()

	
def parse_cmd_line():
	parser = argparse.ArgumentParser(description='Mininet Deployer')
	parser.add_argument('--topology', dest='topoInfo', action='store', default='topo:topo1.json', help='Topology Info topo:param see readme for further details')
	args = parser.parse_args()	
	if len(sys.argv)==1:
    		parser.print_help()
    		sys.exit(1)
	data = args.topoInfo.split(":")	
	return (data[0], data[1])

def check_precondition():
	if vll_path == "" or parser_path == "":
		print "Error Set Environment Variable At The Beginning Of File"
		sys.exit(-2)

if __name__ == '__main__':
	check_precondition()
	(topol, param) = parse_cmd_line()
	if topol == 'topo':
		print "*** Create Topology With Services From File:", param
		topo(param)
	elif topol == "meshRouter":
		print "*** Create Mesh Topology of Routers:", param
		meshRouter(param)
	elif topol == "simpleRouter":
		print "*** Create Simple Topology of Routers:", param
		simpleRouter(param)
	else:
		print "*** Error Unknow Topology:", topo, param
