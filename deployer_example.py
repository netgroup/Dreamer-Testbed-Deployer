#!/usr/bin/python

##############################################################################################
# Copyright (C) 2014 Pier Luigi Ventre - (Consortium GARR and University of Rome "Tor Vergata")
# Copyright (C) 2014 Giuseppe Siracusano, Stefano Salsano - (CNIT and University of Rome "Tor Vergata")
# www.garr.it - www.uniroma2.it/netgroup - www.cnit.it
#
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Deployer example.
#
# @author Pier Luigi Ventre <pl.ventre@gmail.com>
# @author Giuseppe Siracusano <a_siracusano@tin.it>
# @author Stefano Salsano <stefano.salsano@uniroma2.it>
#
# XXX Depends On Dreamer-Setup-Script

import argparse
import sys
import os
from testbed import *
from coexistence_mechanisms import *
from ingress_classification import *
from testbed_deployer_utils import *

def meshOSHI(param, testbed):
	
	verbose = True
	tunneling = "VXLAN"

	if verbose:
		print "*** No Autogenerated"
	generator = PropertiesGenerator(testbed)
	
	if verbose:
		print "*** Create CR OSHI"
	cr_oshis_n = ["cro%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create PE OSHI"
	pe_oshis_n = ["peo%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create CER"
	cers_n = ["cer%s" % (x + 1) for x in range(int(param))]

	if verbose:
		print "*** Build Vertices Properties"
	cr_oshis_properties = generator.getVerticesProperties(cr_oshis_n)
	cr_data = []
	for cr_oshi_property in cr_oshis_properties:
		data = {'loopback':cr_oshi_property.loopback, 'domain-oshi':{'layer-Control':{'cluster_id':''}}}
		cr_data.append(data)

	pe_oshis_properties = generator.getVerticesProperties(pe_oshis_n)
	pe_data = []
	for pe_oshi_property in pe_oshis_properties:
		data = {'loopback':pe_oshi_property.loopback, 'domain-oshi':{'layer-Control':{'cluster_id':''}}}
		pe_data.append(data)

	vlls = [(cers_n[0], cers_n[len(cers_n)-1])]
	pws = [(cers_n[0], cers_n[len(cers_n)-1])]

	print "*** Mesh With", param, "CR OSHI", param, "PE OSHI", param, "CER"
	factory = TestbedFactory(False)
	testbed = factory.getTestbedOSHI(testbed, tunneling, False, "")	
	
	cr_oshis = []
	for i in range(int(param)):
		croshi = testbed.addCrOshi(cr_data[i], cr_oshis_n[i])
		for rhs in cr_oshis:
			linkproperty = generator.getLinksProperties([(croshi.name, rhs.name)])
			testbed.addLink(croshi.name, rhs.name, linkproperty[0])
			if verbose:			
				print "*** Connect", croshi.name, "To", rhs.name
				print "*** Link Properties", linkproperty[0]
		cr_oshis.append(croshi)

	if verbose:
		print "*** Build CONTROLLER"
	ctr_property = {"domain-oshi": { "layer-Control": { "cluster_id": ""}},"tcp_port": "6633"}
	ctrl = testbed.addController(ctr_property, "ctr1")	
	testbed.addCoexistenceMechanism("COEXH", 0)
	linkproperties = generator.getLinksProperties([(croshi.name, ctrl.name)])
	linkproperties[0].ingr.type = "INGRB"
	linkproperties[0].ingr.data = None
	[(lhs_vi, lhs_tap, lhs_ospf_net), (rhs_vi, rhs_tap, rhs_ospf_net)] = testbed.addLink(croshi.name, ctrl.name, linkproperties[0])
	
	if verbose:			
		print "*** Connect", ctrl.name, "To", croshi.name

	pe_oshis = []
	for i in range(int(param)):
		peoshi = testbed.addPeOshi(pe_data[i], pe_oshis_n[i])
		linkproperty = generator.getLinksProperties([(peoshi.name, cr_oshis[i].name)])
		testbed.addLink(peoshi.name, cr_oshis[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", peoshi.name, "To", cr_oshis[i].name
			print "*** Link Properties", linkproperty[0]
		pe_oshis.append(peoshi)

	cers = []
	for i in range(int(param)):
		cer = testbed.addCer(0, {}, cers_n[i])
		linkproperty = generator.getLinksProperties([(cer.name, pe_oshis[i].name)])
		testbed.addLink(cer.name, pe_oshis[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", cer.name, "To", pe_oshis[i].name
			print "*** Link Properties", linkproperty[0]

	if verbose:
			print "*** Build VLLs Properties"
	vlls_properties = []
	for vll in vlls:
		vlls_properties.append(generator.getVLLsProperties(vll))

	i = 0
	for vll in vlls:
		testbed.addVLL(vll[0], vll[1], vlls_properties[i])
		if verbose:			
			print "*** VLLs Properties", vlls_properties[i]
		i = i + 1

	if verbose:
			print "*** Build PWs Properties"
	pws_properties = []
	for pw in pws:
		pws_properties.append(generator.getVLLsProperties(pw))

	i = 0
	for pw in pws:
		testbed.addPW(pw[0], pw[1], pws_properties[i])
		if verbose:			
			print "*** PWs Properties", pws_properties[i]
		i = i + 1	
	
	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate LME rules"
	testbed.generateLMErules()
	print "*** Generate VLL pusher cfg"
	testbed.generateVLLCfg()
	print "*** Generate management.sh"
	testbed.configureMGMT()
	print "*** Generate vsf.cfg"
	testbed.generateVSFCfg()


def meshRouter(param, testbed):
	
	verbose = True
	tunneling = "OpenVPN"	

	if verbose:
		print "*** No Autogenerated"
	generator = PropertiesGenerator(testbed)
	
	if verbose:
		print "*** Create Routers"
	routers_n = ["rou%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create Hosts"
	euhs_n = ["euh%s" % (x + 1) for x in range(int(param), (2 * int(param)))]
	if verbose:
		print "*** Build Vertices Properties"
		routers_properties = generator.getVerticesProperties(routers_n)
	
		routers_data = []
		for router_property in routers_properties:
			data = {'loopback':router_property.loopback}
			routers_data.append(data)
		

	print "*** Mesh With", param, "Router"
	factory = TestbedFactory(False)
	testbed = factory.getTestbedRouter(testbed, tunneling, "")	
	
	routers = []
	for i in range(int(param)):
		router = testbed.addRouter(routers_data[i], routers_n[i])
		for rhs in routers:
			linkproperty = generator.getLinksProperties([(router.name, rhs.name)])
			testbed.addLink(router.name, rhs.name, linkproperty[0])
			if verbose:			
				print "*** Connect", router.name, "To", rhs.name
				print "*** Link Properties", linkproperty[0]
			#MultiLink			
			#linkproperty = generator.getLinksProperties((router.name, rhs.name))
			#testbed.addLink(router.name, rhs.name, linkproperty[0])
			#if verbose:			
			#	print "*** Connect", router.name, "To", rhs.name
			#	print "*** Link Properties", linkproperty[0]
		routers.append(router)

	euhs = []
	for i in range(int(param)):
		euh = testbed.addEuh(euhs_n[i])
		linkproperty = generator.getLinksProperties([(euh.name, routers[i].name)])
		testbed.addLink(euh.name, routers[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", euh.name, "To", routers[i].name
			print "*** Link Properties", linkproperty[0]

	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate management.sh"
	testbed.configureMGMT()


if __name__ == '__main__':
	meshRouter(3, "OFELIA")
	#meshOSHI(3, "GOFF")
