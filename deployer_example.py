#!/usr/bin/python

##############################################################################################
# Copyright (C) 2014 Pier Luigi Ventre - (Consortium GARR and University of Rome "Tor Vergata")
# Copyright (C) 2014 Giuseppe Siracusano, Stefano Salsano - (CNIT and University of Rome "Tor Vergata")
# www.garr.it - www.uniroma2.it/netgroup - www.cnit.it
#
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Deployer example.
#
# @author Pier Luigi Ventre <pl.ventre@gmail.com>
# @author Giuseppe Siracusano <a_siracusano@tin.it>
# @author Stefano Salsano <stefano.salsano@uniroma2.it>
#
# XXX Depends On Dreamer-Setup-Script

import argparse
import sys
import os
from testbed import *
from coexistence_mechanisms import *
from ingress_classification import *
from testbed_deployer_utils import *

def meshOSHI(param, testbed):
	
	verbose = True
	tunneling = "OpenVPN"

	if verbose:
		print "*** No Autogenerated"
	generator = PropertiesGenerator(testbed)
	
	if verbose:
		print "*** Create OSHI"
	oshis_n = ["osh%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create AOSHI"
	aoshis_n = ["aos%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create Hosts"
	euhs_n = ["euh%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Build Vertices Properties"
	oshis_properties = generator.getVerticesProperties(oshis_n)
	aoshis_properties = generator.getVerticesProperties(aoshis_n)

	vlls = [(euhs_n[0], euhs_n[len(euhs_n)-1])]

	print "*** Mesh With", param, "OSHI", param, "AOSHI", param, "EUH"
	factory = TestbedFactory(verbose)
	testbed = factory.getTestbedOSHI(testbed, tunneling)	
	
	oshis = []
	for i in range(int(param)):
		oshi = testbed.addOshi(oshis_n[i], oshis_properties[i])
		for rhs in oshis:
			linkproperty = generator.getLinksProperties([(oshi.name, rhs.name)])
			testbed.addLink(oshi.name, rhs.name, linkproperty[0])
			if verbose:			
				print "*** Connect", oshi.name, "To", rhs.name
				print "*** Link Properties", linkproperty[0]
		oshis.append(oshi)

	if verbose:
		print "*** Build CONTROLLER"
	ctrl = testbed.addController("ctrl1", 6633)	
	coex = CoexB()
	testbed.addCoexistenceMechanism(coex)
	linkproperties = generator.getLinksProperties([(oshi.name, ctrl.name)])
	[(lhs_vi, lhs_tap, lhs_ospf_net), (rhs_vi, rhs_tap, rhs_ospf_net)] = testbed.addLink(oshi.name, ctrl.name, linkproperties[0])
	ingress = IngrB(coex, lhs_tap, lhs_vi)
	testbed.addIngressClassification(ctrl.name, oshi.name, ingress)
	if verbose:			
		print "*** Connect", ctrl.name, "To", oshi.name

	aoshs = []
	for i in range(int(param)):
		aoshi = testbed.addAoshi(aoshis_n[i], aoshis_properties[i])
		linkproperty = generator.getLinksProperties([(aoshi.name, oshis[i].name)])
		testbed.addLink(aoshi.name, oshis[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", aoshi.name, "To", oshis[i].name
			print "*** Link Properties", linkproperty[0]
		aoshs.append(aoshi)

	euhs = []
	for i in range(int(param)):
		euh = testbed.addEuh(euhs_n[i])
		linkproperty = generator.getLinksProperties([(euh.name, aoshs[i].name)])
		testbed.addLink(euh.name, aoshs[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", euh.name, "To", aoshs[i].name
			print "*** Link Properties", linkproperty[0]

	if verbose:
			print "*** Build VLLs Properties"
	vlls_properties = []
	for vll in vlls:
		vlls_properties.append(generator.getVLLsProperties(vll))

	i = 0
	for vll in vlls:
		testbed.addVLL(vll[0], vll[1], vlls_properties[i])
		if verbose:			
			print "*** VLLs Properties", vlls_properties[i]
		i = i + 1	
	
	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate LME rules"
	testbed.generateLMErules()
	print "*** Generate VLL pusher cfg"
	testbed.generateVLLCfg()
	print "*** Generate management.sh"
	testbed.configureMGMT()




def meshRouter(param, testbed):
	
	verbose = True
	tunneling = "VXLAN"	

	if verbose:
		print "*** No Autogenerated"
	generator = PropertiesGenerator(testbed)
	
	if verbose:
		print "*** Create Routers"
	routers_n = ["rou%s" % (x + 1) for x in range(int(param))]
	if verbose:
		print "*** Create Hosts"
	euhs_n = ["euh%s" % (x + 1) for x in range(int(param), (2 * int(param)))]
	if verbose:
		print "*** Build Vertices Properties"
		routers_properties = generator.getVerticesProperties(routers_n)

	print "*** Mesh With", param, "Router"
	factory = TestbedFactory(verbose)
	testbed = factory.getTestbedRouter(testbed, tunneling)	
	
	routers = []
	for i in range(int(param)):
		router = testbed.addRouter(routers_n[i], routers_properties[i])
		for rhs in routers:
			linkproperty = generator.getLinksProperties([(router.name, rhs.name)])
			testbed.addLink(router.name, rhs.name, linkproperty[0])
			if verbose:			
				print "*** Connect", router.name, "To", rhs.name
				print "*** Link Properties", linkproperty[0]
			#MultiLink			
			#linkproperty = generator.getLinksProperties((router.name, rhs.name))
			#testbed.addLink(router.name, rhs.name, linkproperty[0])
			#if verbose:			
			#	print "*** Connect", router.name, "To", rhs.name
			#	print "*** Link Properties", linkproperty[0]
		routers.append(router)

	euhs = []
	for i in range(int(param)):
		euh = testbed.addEuh(euhs_n[i])
		linkproperty = generator.getLinksProperties([(euh.name, routers[i].name)])
		testbed.addLink(euh.name, routers[i].name, linkproperty[0])
		if verbose:			
			print "*** Connect", euh.name, "To", routers[i].name
			print "*** Link Properties", linkproperty[0]

	print "*** Generate testbed.sh"
	testbed.configure()
	print "*** Generate management.sh"
	testbed.configureMGMT()


if __name__ == '__main__':
	#meshRouter(3, "OFELIA")
	meshOSHI(3, "GOFF")
